{"version":3,"file":"hook-stash.es.js","sources":["../domain/di.ts","../packages/common/useSymbol.ts","../packages/di/createServiceComponent.tsx","../packages/di/useServiceHook.ts","../packages/common/useDebounceCallback.ts","../packages/common/usePrevious.ts","../packages/common/useRefState.ts","../packages/common/useHistoryState.ts","../packages/common/useUpdateEffect.ts","../packages/common/useWatchEffect.ts","../packages/common/useUpdateCount.ts","../domain/http.ts","../packages/http/useHttp.ts","../packages/http/usePaging.ts","../packages/stash/useStash.ts"],"sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport interface ServiceHook<C> {\r\n  (): C;\r\n  token?: symbol;\r\n}\r\n\r\nexport type ChainNodes<T = any> = {data: T; id: symbol; name: string; parent: ChainNodes<T> | null};\r\n\r\nexport const SERVICE_CONTEXT = createContext<ChainNodes<any> | null>(null);\r\nexport const CACHE_MAP = {} as Record<symbol, any>;","import { useRef } from \"react\";\r\n\r\n/** \r\n * @description 在组件声明周期内生成一个唯一symbol标识\r\n */\r\nexport function useSymbol () {\r\n  const symbol = useRef(\r\n    Symbol('a unique symbol id for current functional component')\r\n  )\r\n  return symbol.current;\r\n}","import React, { PropsWithChildren } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { CACHE_MAP, ChainNodes, ServiceHook, SERVICE_CONTEXT } from \"../../domain/di\";\r\nimport { useSymbol } from \"../common/useSymbol\";\r\n\r\nexport function createServiceComponent<C = {[prop: string]: any}>(Comp: React.FC<C>, hooks: ServiceHook<unknown>[]) {\r\n  return React.memo((props: PropsWithChildren<C>) => {\r\n    const id = useSymbol()\r\n    const topChainNode = useContext(SERVICE_CONTEXT);\r\n    const chainNode: ChainNodes<any> = {\r\n      data: {},\r\n      id,\r\n      name: Comp.name,\r\n      parent: topChainNode\r\n    }\r\n\r\n    /** 初始化执行service hooks 并将调用结果存入dependsMap与CACHE_MAP */\r\n    for(let hook of hooks) {   \r\n      if(!hook.token) hook.token = Symbol(hook.name);\r\n      const token = hook.token as symbol;  \r\n      const res = hook();      \r\n      chainNode.data[token] = res;\r\n      CACHE_MAP[token]  = res;\r\n    }\r\n\r\n    /** 将service hooks遍历执行完毕后，需要立即清除在CACHE_MAP中缓存的依赖 */\r\n    hooks.forEach(hook => {\r\n      if(hook.token && CACHE_MAP[hook.token]) delete CACHE_MAP[hook.token];\r\n    })\r\n\r\n    // console.log('chain node', chainNode)\r\n\r\n    return (\r\n      <SERVICE_CONTEXT.Provider value={ chainNode }>\r\n        <Comp {...props} />\r\n      </SERVICE_CONTEXT.Provider>\r\n    )\r\n  })\r\n}\r\n\r\nexport const createComponentWithProvider = createServiceComponent;","import { useContext } from \"react\";\r\nimport { CACHE_MAP, ChainNodes, ServiceHook, SERVICE_CONTEXT } from \"../../domain/di\";\r\n\r\ninterface ServiceOptions {\r\n  optional?: boolean;\r\n  skipOne?: boolean;\r\n}\r\n\r\nexport function useServiceHook<C>(input: ServiceHook<C> | symbol,): C;\r\nexport function useServiceHook<C>(input: ServiceHook<C> | symbol, options: ServiceOptions): C | null;\r\nexport function useServiceHook<C>(input: ServiceHook<C> | symbol, options?: ServiceOptions) {\r\n  const token = (typeof input === 'symbol' ? input : input.token) as unknown as symbol;\r\n  const chainNode = useContext(SERVICE_CONTEXT);\r\n  const depends = CACHE_MAP[token] ? CACHE_MAP[token] : findDepsInChainNode(chainNode as ChainNodes, token, options);\r\n  if(depends) {\r\n    return depends\r\n  } \r\n  if(options && options.optional === true) {\r\n    return null\r\n  } else {\r\n    throw new Error(`未找到${token.description}的依赖值，请在上层servcieComponent中提供对应的service hook`)\r\n  }\r\n}\r\n\r\nfunction findDepsInChainNode(node: ChainNodes, token: symbol, options?: ServiceOptions): any {\r\n  const deps  = node.data[token];\r\n  if(deps && !options?.skipOne) return deps;\r\n  if(node.parent) return findDepsInChainNode(node.parent, token);\r\n  if(!node.parent) return null;\r\n}\r\n\r\n\r\nfunction checkOption(option: object): option is ServiceOptions {\r\n  return option.hasOwnProperty('skipOne')\r\n}\r\n\r\n\r\n\r\n","import { useCallback, useRef } from \"react\";\r\n\r\n/**\r\n * @description 防抖函数\r\n * @param callback 初始回调函数\r\n * @param deps 依赖值\r\n * @param debounceTime 防抖时间\r\n * @returns debouncer \r\n */\r\nexport function useDebounceCallback(callback: (...params: any) => void, deps: unknown[], debounceTime: number) {\r\n\r\n  const timeRef = useRef<NodeJS.Timeout>(null);\r\n  const runner  = useCallback(callback, deps);\r\n\r\n  const debouncer = (...params: any) => {\r\n    clearTimeout(timeRef.current);\r\n    const runTimeout = () => {\r\n      return setTimeout(() => { runner(...params) }, debounceTime)\r\n    }\r\n    timeRef.current = runTimeout();\r\n  }\r\n\r\n  return debouncer;\r\n}","import { useRef } from \"react\";\r\n\r\n/**\r\n * @description 将最近两次变化的值并返回(只有输入值变化时，返回值才会相应地更新)\r\n * @param state 状态变量（建议为useState函数返回的变量）\r\n * @returns 上一个值\r\n */\r\nexport function usePrevious<T>(state: T) {\r\n  const prevRef = useRef<T>();\r\n  const curRef = useRef<T>();\r\n\r\n  if(curRef.current !== state) {\r\n    prevRef.current = curRef.current;\r\n    curRef.current = state;\r\n  }  \r\n\r\n  return prevRef.current;\r\n}","import { useState } from \"react\";\r\n\r\n/**\r\n * @description 使用引用类型的状态变量，并返回状态值和状态变更函数\r\n * @param refState \r\n * @returns \r\n */\r\nexport function useRefState<T extends object>(refState: T): [T, (v: Partial<T>) => void] {\r\n  const [state, setState] = useState(refState);\r\n\r\n  const setRefState = (newV: Partial<T>) => {\r\n    setState(oldV => ({ ...oldV, ...newV }));\r\n  }\r\n\r\n  return [state, setRefState]\r\n}","import { useEffect, useState } from \"react\";\r\n\r\n/**\r\n * @description 保存状态的历史变化记录\r\n * @param state 状态变量\r\n * @returns state历史值，最新值在末尾\r\n */\r\nexport function useHistoryState<T>(state: T) {\r\n  const [logs, setLogs] = useState<T[]>([]);\r\n\r\n  useEffect(() => {\r\n    setLogs(logs => logs.concat([state]))\r\n  }, [state])\r\n\r\n  return logs\r\n}","import { useEffect, useRef } from \"react\";\r\nimport { usePrevious } from \"./usePrevious\";\r\n\r\n/**\r\n * @description 依赖值更新时执行副作用函数（忽略组件第一次渲染后的副作用），并将每个依赖上一次变更的值传给副作用函数\r\n * @param callback 要执行的回调函数\r\n * @param deps 状态依赖\r\n */\r\nexport function useUpdateEffect(callback: ((changes?: unknown[]) => () => void) | ((changes?: unknown[]) => void), deps: unknown[]) {\r\n  const counter = useRef(0);\r\n  const changesRef = useRef([]) ;\r\n  \r\n  deps.forEach((dep, index) => {\r\n    changesRef.current[index] = usePrevious(dep)\r\n  })\r\n\r\n  useEffect(() => {\r\n    counter.current ++;\r\n    if(counter.current == 1) return;\r\n    return callback(changesRef.current);\r\n  }, deps)\r\n}","import { useEffect, useRef } from \"react\";\r\n\r\n/**\r\n * @description 依赖值更新时执行的副作用函数，并将函数上一次调用时的所有依赖值传给当前调用(注意与useUpdateEffect的区别)\r\n * @param callback 要执行的回调函数\r\n * @param deps 状态依赖\r\n */\r\nexport function useWatchEffect(callback: ((changes?: unknown[]) => () => void) | ((changes?: unknown[]) => void), deps: unknown[]) {\r\n  const runCount = useRef(0);\r\n  const caches = useRef([]);\r\n\r\n  useEffect(() => {\r\n    caches.current.push(deps);    \r\n    runCount.current ++;\r\n    if(runCount.current  === 1) return;\r\n    return callback(caches.current.shift());    \r\n  }, deps)\r\n}","import { useState } from \"react\";\r\nimport { usePrevious } from \"./usePrevious\";\r\nimport { useUpdateEffect } from \"./useUpdateEffect\";\r\n\r\n/**\r\n * @description 记录状态的变化次数(第一次初始化时记为第0次)\r\n * @param state 状态变量\r\n * @param options\r\n * deep: 是否为深度比较，state为对象时，会遍历其属性进行比较,全部相等时不会记为一次变化\r\n * @returns \r\n */\r\nexport function useUpdateCount<T>(state: T, options?: {deep: boolean}) {\r\n  const[count, setCount] = useState(0);\r\n  const before = usePrevious(state);\r\n\r\n  useUpdateEffect(() => {\r\n    if(options?.deep) {\r\n      let changed: boolean = false;\r\n      for(let key in state) {\r\n        if(state[key] !== before?.[key]) {\r\n          changed = true;\r\n          break;\r\n        }\r\n      }\r\n      changed && setCount(v => v + 1)\r\n    } else {\r\n      state !== before && setCount(v => v + 1)\r\n    }\r\n  }, [state, before])\r\n\r\n  return count\r\n}","\r\n/** http拦截器函数 */\r\nexport interface HttpIntercept {\r\n  /** http请求拦截器 */\r\n  requestIntercept?: (request: Partial<RequestOptions>) => Promise<RequestOptions>;\r\n  /** http响应拦截器 */\r\n  responseIntercept?: (res: any) => Promise<any>;\r\n}\r\n\r\n/** 自定义http请求函数 */\r\nexport interface RequesterFunc {\r\n  (input: string, opt?: RequestOptions): Promise<Record<string, any>>;\r\n}\r\n \r\n/** 请求配置项 */\r\nexport interface RequestOptions {\r\n  url: string;\r\n  method: 'GET' | 'POST' | 'PUT' | 'HEAD' | 'DELETE';\r\n  reqData: any;\r\n  auto?: boolean;  \r\n  headers: any;\r\n  defaultValue?: any;\r\n  [prop: string]: any;\r\n}\r\n\r\n/** http请求状态 */\r\nexport type HttpState = 'ready' | 'pending' | 'refreshing' | 'success' | 'failed';\r\n\r\n/** HTTP拦截器token */\r\nexport const HTTP_INTERCEPT = Symbol('供useHttp使用的请求拦截器');\r\n\r\n/** 自定义HTTP函数token */\r\nexport const CUSTOME_REQUEST = Symbol('自定义请求函数，以覆盖默认的fetch函数');\r\n\r\n/** Paging分页请求配置 */\r\nexport interface PagingSetting<T = any> {\r\n  start: 0 | 1;\r\n  size: number;\r\n  sizeKey: string;\r\n  indexKey: string;\r\n  method: 'GET' | 'POST';\r\n  scrollLoading: boolean;\r\n  dataPlucker: (res: any) => T[];\r\n  totalPlucker: (res: any) => number;\r\n}\r\n\r\n/** 分页请求状态） */\r\nexport type PagingState = 'empty' | 'unfulled' | 'fulled' | 'refreshing' | 'loading';\r\n\r\n/** Paging分页请求token */\r\nexport const PAGING_SETTING = Symbol('提供全局分页配置');","import { useEffect, useMemo, useState } from \"react\";\r\nimport { CUSTOME_REQUEST, HttpIntercept, HttpState, HTTP_INTERCEPT, RequesterFunc, RequestOptions } from \"../../domain/http\";\r\nimport { useServiceHook } from \"../di/useServiceHook\";\r\n\r\n/**\r\n * @description ajax请求，默认通过fetch发送请求，可通过di依赖注入方式提供自定义请求方法\r\n * @param url 请求地址，必传\r\n * @param localOptions 请求配置项 选传\r\n * @returns  [请求结果, 请求方法, 请求状态, 错误信息]\r\n */\r\nexport function useHttp<T>(\r\n  url: string, localOptions: Partial<RequestOptions> = {}\r\n): [T | undefined, (query?: any) => Promise<void | T>, HttpState, any] {\r\n\r\n  const DEFAULT_HTTP_OPTIONS: Partial<RequestOptions> = {\r\n    auto: false,\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    reqData: {}\r\n  }\r\n\r\n  /** 设置请求配置以及上层组件注入进来的配置项 */\r\n  const options       = useMemo(() => Object.assign(Object.create(DEFAULT_HTTP_OPTIONS), localOptions, { url }), [localOptions, url]);\r\n  const intercept     = useServiceHook<HttpIntercept>(HTTP_INTERCEPT, {optional: true});\r\n  const customeReq    = useServiceHook<RequesterFunc>(CUSTOME_REQUEST, {optional: true});\r\n\r\n  /** 定义http请求的相关状态变量 */\r\n  const [res, setRes]        = useState<T>(options.defaultValue as T);\r\n  const [err, setErr]        = useState<any>();\r\n  const [state, setState]    = useState<HttpState>('ready');  \r\n\r\n  const request =  (query: any = {}) => {\r\n    setState('pending');\r\n    return new Promise<RequestOptions>(resolve => {\r\n      if(intercept?.requestIntercept) {        \r\n        intercept.requestIntercept({ ...options, reqData: query }).then(finalOptions => resolve(finalOptions))\r\n      } else {\r\n        resolve({ ...options, reqData: query })\r\n      } \r\n    })\r\n    .then(options2 => {\r\n      let reqData = options2.reqData;\r\n      if(customeReq) {\r\n        return customeReq(options2.url, {...options2, reqData})\r\n      } else {\r\n        if(['GET', 'HEAD'].includes(options2.method) || !options2.method) {\r\n          const searchKeys = `?${objectToUrlSearch(reqData)}`;\r\n          options2.url += searchKeys;  \r\n          delete options2.body;\r\n        } else {\r\n          options2.body = reqData instanceof FormData ? reqData : JSON.stringify(reqData);\r\n          delete options2.reqData;\r\n        }\r\n        return fetch(options2.url, options2)\r\n      }\r\n    })\r\n    .then(response => {\r\n      const res = response;\r\n      const resIntercept = intercept?.responseIntercept\r\n      if(customeReq) {\r\n        return resIntercept ? resIntercept(res) : res;\r\n      } else {\r\n        return res.json().then((re: any) => resIntercept ? resIntercept(re) : re)\r\n      }\r\n    })\r\n    .then(res => {\r\n      setRes(res);\r\n      setState('success');\r\n      return res as T;\r\n    })\r\n    .catch(err => {      \r\n      setState('failed');\r\n      setErr(err);\r\n      throw new Error(err);\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(options.auto) request(options.reqData)\r\n  }, [])\r\n\r\n  return [res, request, state, err]\r\n} \r\n\r\nfunction objectToUrlSearch(obj: object) {\r\n  console.log(obj)\r\n  if(!obj) return '';\r\n  let str = '';\r\n  for(let key in obj) {\r\n    str += `${key}=${obj[key]}&`\r\n  }\r\n  return str\r\n}\r\n\r\n","import { useEffect, useLayoutEffect, useMemo, useRef, useState } from \"react\";\r\nimport { HttpState, PagingSetting, PagingState, PAGING_SETTING, RequestOptions } from \"../../domain/http\";\r\nimport { useServiceHook } from \"../di/useServiceHook\";\r\nimport { useHttp } from \"./useHttp\";\r\nimport { useUpdateEffect } from '../common/useUpdateEffect'\r\n\r\ninterface PagingAction {\r\n  /** 刷新请求(分页重置，清除原有请求的查询参数querys)  */\r\n  fresh: (querys: object) => void;\r\n  /** 刷新请求(分页重置，保留每次请求的查询参数querys) */\r\n  refresh: (querys: object) => void;\r\n  /** 重置请求(分页重置，清除历史查询参数querys，但保留初次调用时的querys) */\r\n  reset: () => void;\r\n  /** 请求下一页数据 */\r\n  nextPage: () => void;\r\n}\r\n\r\ninterface Page {\r\n  target: number;\r\n  __index: number;\r\n  __size: number;\r\n  total: number;\r\n  [prop: string]: number;\r\n}\r\n\r\nconst LocalPagingSetting: Partial<PagingSetting> = {\r\n  method: 'POST',\r\n  sizeKey: 'pageSize',\r\n  indexKey: 'pageNo',\r\n  size: 10,\r\n  start: 1,\r\n  scrollLoading: true,\r\n  dataPlucker: res => res.data,\r\n  totalPlucker: res => res?.total || 0\r\n}\r\n\r\nexport function usePaging<T>(\r\n  url: string,\r\n  querys: object = {},\r\n  localSetting: Partial<PagingSetting & RequestOptions>  = {}\r\n): [T[], PagingAction, {pagingState: PagingState, httpState: HttpState, pageInfo: Partial<Page>}] {\r\n\r\n  /** 初始化分页请求配置 */\r\n  const globalSetting = useServiceHook<PagingSetting>(PAGING_SETTING, {optional: true});\r\n  const setting = {...LocalPagingSetting, ...(globalSetting || {}), ...localSetting} as PagingSetting & RequestOptions;  \r\n\r\n  /** 初始化条件查询对象 */\r\n  const querysRef = useRef(querys);\r\n\r\n  /** 初始化分页信息 */\r\n  const pageRef = useRef<Partial<Page>>({});\r\n\r\n  useLayoutEffect(() => {\r\n    pageRef.current.target                 = setting.start;\r\n    pageRef.current[setting['indexKey']]   = setting.start;\r\n    pageRef.current[setting['sizeKey']]    = setting.size;\r\n\r\n    !pageRef.current.hasOwnProperty('__index') && \r\n    Object.defineProperty(pageRef.current, '__index', {\r\n      get: () => pageRef.current[setting['indexKey']],\r\n      set: (num: number) => { pageRef.current[setting['indexKey']] = num }\r\n    });\r\n    !pageRef.current.hasOwnProperty('__size') && \r\n    Object.defineProperty(pageRef.current, '__size', {\r\n      get: () => pageRef.current[setting['sizeKey']]\r\n    });\r\n  }, [])\r\n\r\n  /** 定义分页请求逻辑 */\r\n  const [, request, httpState ] = useHttp<T>(url, {...setting, auto: false});\r\n  const [currentPagingData, setCurrentPagingData] = useState<T[]>([]);\r\n\r\n  const loadData = () => {\r\n    if (httpState === 'pending') return;    \r\n    return request({ ...querysRef.current, [setting['indexKey']]: pageRef.current.target, [setting['sizeKey']]: pageRef.current.__size })\r\n      .then(res => {\r\n        if(!res) return;\r\n        pageRef.current.total = setting.totalPlucker(res);\r\n        const list = setting.dataPlucker(res) as T[];\r\n        if(pageRef.current.target === setting.start || !setting.scrollLoading) {\r\n          setCurrentPagingData(list);\r\n        } else {\r\n          setCurrentPagingData(val => val.concat(list));\r\n        }\r\n      })\r\n  }\r\n\r\n  const fresh = (param = {}) => {\r\n    querysRef.current = { ...querys, ...param };\r\n    pageRef.current.target = setting.start;\r\n    setCurrentPagingData([]);\r\n    loadData();\r\n  }\r\n\r\n  const refresh = (param = {}) => {\r\n    querysRef.current = { ...querys, ...querysRef.current, ...param };\r\n    pageRef.current.target = setting.start;\r\n    setCurrentPagingData([]);\r\n    loadData();\r\n  }\r\n\r\n  const reset = () => {\r\n    querysRef.current = querys;\r\n    pageRef.current.target = setting.start;\r\n    setCurrentPagingData([]);\r\n    loadData();\r\n  }\r\n\r\n  const nextPage = () => {    \r\n    if (pagingState === 'fulled') return;\r\n    pageRef.current.target = pageRef.current.__index + 1;\r\n    loadData();\r\n  }    \r\n\r\n  useEffect(() => {\r\n    if(setting.auto) loadData();\r\n  }, [])  \r\n\r\n  useUpdateEffect(() => {    \r\n    httpState === 'success' && (pageRef.current.__index = pageRef.current.target) // 只有在请求成功时才能将当前页index值更新为目标页target \r\n  }, [httpState])         \r\n  \r\n  /** 根据请求结果设置分页请求状态 */\r\n  const pagingState: PagingState = useMemo(() => {\r\n    switch(httpState) {\r\n      default:\r\n        return 'refreshing';\r\n      case 'pending':\r\n        if(pageRef.current.target === setting.start) {\r\n          return 'refreshing';\r\n        } else {\r\n          return 'loading'\r\n        }\r\n      case 'success':\r\n        if(pageRef.current.target === setting.start && !currentPagingData?.length) return 'empty';\r\n        if(currentPagingData.length < pageRef.current.__size) return 'fulled';\r\n        if(currentPagingData.length >= pageRef.current.total) return 'fulled';\r\n        return 'unfulled';\r\n    }\r\n  }, [httpState])\r\n  \r\n\r\n  return [    \r\n    currentPagingData,\r\n    { fresh, refresh, reset, nextPage },    \r\n    {pagingState, httpState, pageInfo: pageRef.current}\r\n  ]\r\n}\r\n","import { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\n\r\n/**\r\n * @function 创建一个可观察值\r\n * @description \r\n * - 内部基于rxjs的BehaviorSubject实现\r\n * - 返回可观察值的监听与变更方法，区别于useState，调用变更方法时不会触发函数组件重新调用\r\n * - 建议在hook函数中替代原本使用useState的场景，可避免hook函数内部触发组件渲染，导致渲染次数不可控而引起性能问题\r\n * @param initValue \r\n * @returns \r\n *  - getValue 用于获取值，可以传入一个回调函数，回调函数会在值变更时被调用\r\n *  - pushValue 用于设置值，可以传入一个新值或者一个函数，函数接受旧值并返回新值\r\n * @example\r\n * const [count, setCount] = useStash(0);\r\n * const [getValue, pushValue] = useStash(count);\r\n * getValue(setCount);\r\n * setValue(1);\r\n */\r\nexport function useStash<T>(initValue: T) {\r\n  const subject = useRef( new BehaviorSubject<T>(initValue) );\r\n\r\n  function getValueFunc(): T;\r\n  function getValueFunc(callback: (value: T) => void): WatchValuerReturn;\r\n  function getValueFunc(callback?: (value: T) => void): WatchValuerReturn | T {\r\n    if(!callback) {\r\n      return subject.current.getValue();\r\n    } else {\r\n      const subscription = subject.current.subscribe(callback);\r\n      return () => {\r\n        subscription.unsubscribe();\r\n      };\r\n    }    \r\n  }\r\n  getValueFunc.observable = subject.current.asObservable();\r\n  getValueFunc.useState = function() {\r\n    const [state, setState] = useState(subject.current.getValue());\r\n    useEffect(() => {\r\n      const subscription = subject.current.subscribe(setState);\r\n      return () => {\r\n        subscription.unsubscribe();\r\n      };\r\n    }, []);\r\n    return [state, pushValue] as const;\r\n  }\r\n  const getValue = useCallback(getValueFunc, []);\r\n\r\n  function pushValueFunc(newValue: T | ((oldVal: T) => T)) {\r\n    if (newValue instanceof Function) {\r\n      subject.current.next(newValue(subject.current.getValue()));\r\n    } else {\r\n      subject.current.next(newValue);\r\n    }\r\n  }\r\n  const pushValue = useCallback(pushValueFunc, []);\r\n\r\n  return [getValue, pushValue] as const;\r\n}\r\n\r\ninterface WatchValuerReturn {\r\n  (): void;  \r\n}"],"names":[],"mappings":"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"}