{"version":3,"file":"hook-stash.umd.js","sources":["../domain/di.ts","../packages/di/createServiceComponent.tsx","../packages/di/useServiceHook.ts"],"sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport interface ServiceHook<C> {\r\n  (): C;\r\n  token?: symbol;\r\n}\r\n\r\n\r\nexport const SERVICE_CONTEXT = createContext<any>(null);\r\nexport const CACHE_MAP = {} as Record<symbol, any>;","import React, { PropsWithChildren } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { CACHE_MAP, ServiceHook, SERVICE_CONTEXT } from \"../../domain/di\";\r\n\r\nexport function createServiceComponent<C = {[prop: string]: any}>(Comp: React.FC<C>, hooks: ServiceHook<unknown>[]) {\r\n  return React.memo((props: PropsWithChildren<C>) => {\r\n    const topContextVal = useContext(SERVICE_CONTEXT);\r\n    let dependsMap      =  {} as any;\r\n    if(topContextVal) dependsMap = Object.create(topContextVal) ;\r\n\r\n    /** 初始化执行service hooks 并将调用结果存入dependsMap与CACHE_MAP */\r\n    for(let hook of hooks) {   \r\n      if(!hook.token) hook.token = Symbol(hook.name);\r\n      const token = hook.token as symbol;  \r\n      const res = hook();      \r\n      dependsMap[token] = res;\r\n      CACHE_MAP[token]  = dependsMap[token]\r\n    }\r\n\r\n    /** 将service hooks遍历执行完毕后，需要立即清除在CACHE_MAP中缓存的依赖 */\r\n    hooks.forEach(hook => {\r\n      if(CACHE_MAP[hook.token]) delete CACHE_MAP[hook.token];\r\n    })\r\n\r\n    return (\r\n      <SERVICE_CONTEXT.Provider value={ dependsMap }>\r\n        <Comp {...props} />\r\n      </SERVICE_CONTEXT.Provider>\r\n    )\r\n  })\r\n}\r\n\r\n","import { useContext } from \"react\";\r\nimport { CACHE_MAP, ServiceHook, SERVICE_CONTEXT } from \"../../domain/di\";\r\n\r\nexport function useServiceHook<C>(input: ServiceHook<C> | symbol, optional: 'optional'): C | null;\r\nexport function useServiceHook<C>(input: ServiceHook<C> | symbol): C;\r\nexport function useServiceHook<C>(input: ServiceHook<C> | symbol, optional?: 'optional') {\r\n  const token = typeof input === 'symbol' ? input : input.token;\r\n  const contextVal = useContext(SERVICE_CONTEXT);\r\n  const depends = contextVal ? contextVal[token] : CACHE_MAP[token];\r\n  if(depends) {\r\n    return depends\r\n  } else if(optional === 'optional') {\r\n    return null\r\n  } else {\r\n    throw new Error(`未找到${name}的依赖值，请在上层servcieComponent中提供对应的service hook`)\r\n  }\r\n}"],"names":["createContext","React","useContext"],"mappings":";;;;;;;;;;EAQO,MAAM,eAAe,GAAGA,mBAAa,CAAM,IAAI,CAAC,CAAC;EACjD,MAAM,SAAS,GAAG,EAAyB;;ECLlC,SAAA,sBAAsB,CAA4B,IAAiB,EAAE,KAA6B,EAAA;EAChH,IAAA,OAAOC,yBAAK,CAAC,IAAI,CAAC,CAAC,KAA2B,KAAI;EAChD,QAAA,MAAM,aAAa,GAAGC,gBAAU,CAAC,eAAe,CAAC,CAAC;UAClD,IAAI,UAAU,GAAS,EAAS,CAAC;EACjC,QAAA,IAAG,aAAa;EAAE,YAAA,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAE;;EAG7D,QAAA,KAAI,IAAI,IAAI,IAAI,KAAK,EAAE;cACrB,IAAG,CAAC,IAAI,CAAC,KAAK;kBAAE,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC/C,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,KAAe,CAAC;EACnC,YAAA,MAAM,GAAG,GAAG,IAAI,EAAE,CAAC;EACnB,YAAA,UAAU,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;cACxB,SAAS,CAAC,KAAK,CAAC,GAAI,UAAU,CAAC,KAAK,CAAC,CAAA;EACtC,SAAA;;EAGD,QAAA,KAAK,CAAC,OAAO,CAAC,IAAI,IAAG;EACnB,YAAA,IAAG,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;EAAE,gBAAA,OAAO,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EACzD,SAAC,CAAC,CAAA;UAEF,QACED,wCAAC,eAAe,CAAC,QAAQ,EAAC,EAAA,KAAK,EAAG,UAAU,EAAA;EAC1C,YAAAA,yBAAA,CAAA,aAAA,CAAC,IAAI,EAAK,EAAA,GAAA,KAAK,EAAI,CAAA,CACM,EAC5B;EACH,KAAC,CAAC,CAAA;EACJ;;ECzBgB,SAAA,cAAc,CAAI,KAA8B,EAAE,QAAqB,EAAA;EACrF,IAAA,MAAM,KAAK,GAAG,OAAO,KAAK,KAAK,QAAQ,GAAG,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;EAC9D,IAAA,MAAM,UAAU,GAAGC,gBAAU,CAAC,eAAe,CAAC,CAAC;EAC/C,IAAA,MAAM,OAAO,GAAG,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;EAClE,IAAA,IAAG,OAAO,EAAE;EACV,QAAA,OAAO,OAAO,CAAA;EACf,KAAA;WAAM,IAAG,QAAQ,KAAK,UAAU,EAAE;EACjC,QAAA,OAAO,IAAI,CAAA;EACZ,KAAA;EAAM,SAAA;EACL,QAAA,MAAM,IAAI,KAAK,CAAC,MAAM,IAAI,CAAA,2CAAA,CAA6C,CAAC,CAAA;EACzE,KAAA;EACH;;;;;;;;;;;"}