{"version":3,"file":"hook-stash.umd.js","sources":["../domain/di.ts","../packages/di/createServiceComponent.tsx","../packages/di/useServiceHook.ts","../packages/common/useDebounceCallback.ts","../packages/common/usePrevious.ts","../packages/common/useRefState.ts","../packages/common/useHistoryState.ts","../packages/common/useUpdateEffect.ts","../packages/common/useWatchEffect.ts","../packages/common/useUpdateCount.ts","../domain/http.ts","../packages/http/useHttp.ts","../packages/http/usePaging.ts"],"sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport interface ServiceHook<C> {\r\n  (): C;\r\n  token?: symbol;\r\n}\r\n\r\n\r\nexport const SERVICE_CONTEXT = createContext<any>(null);\r\nexport const CACHE_MAP = {} as Record<symbol, any>;","import React, { PropsWithChildren } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { CACHE_MAP, ServiceHook, SERVICE_CONTEXT } from \"../../domain/di\";\r\n\r\nexport function createServiceComponent<C = {[prop: string]: any}>(Comp: React.FC<C>, hooks: ServiceHook<unknown>[]) {\r\n  return React.memo((props: PropsWithChildren<C>) => {\r\n    const topContextVal = useContext(SERVICE_CONTEXT);\r\n    let dependsMap      =  {} as any;\r\n    if(topContextVal) dependsMap = Object.create(topContextVal) ;\r\n\r\n    /** 初始化执行service hooks 并将调用结果存入dependsMap与CACHE_MAP */\r\n    for(let hook of hooks) {   \r\n      if(!hook.token) hook.token = Symbol(hook.name);\r\n      const token = hook.token as symbol;  \r\n      const res = hook();      \r\n      dependsMap[token] = res;\r\n      CACHE_MAP[token]  = dependsMap[token]\r\n    }\r\n\r\n    /** 将service hooks遍历执行完毕后，需要立即清除在CACHE_MAP中缓存的依赖 */\r\n    hooks.forEach(hook => {\r\n      if(CACHE_MAP[hook.token]) delete CACHE_MAP[hook.token];\r\n    })\r\n\r\n    return (\r\n      <SERVICE_CONTEXT.Provider value={ dependsMap }>\r\n        <Comp {...props} />\r\n      </SERVICE_CONTEXT.Provider>\r\n    )\r\n  })\r\n}\r\n\r\n","import { useContext } from \"react\";\r\nimport { CACHE_MAP, ServiceHook, SERVICE_CONTEXT } from \"../../domain/di\";\r\n\r\nexport function useServiceHook<C>(input: ServiceHook<C> | symbol, optional: 'optional'): C | null;\r\nexport function useServiceHook<C>(input: ServiceHook<C> | symbol): C;\r\nexport function useServiceHook<C>(input: ServiceHook<C> | symbol, optional?: 'optional') {\r\n  const token = typeof input === 'symbol' ? input : input.token;\r\n  const contextVal = useContext(SERVICE_CONTEXT);\r\n  const depends = contextVal ? contextVal[token] : CACHE_MAP[token];\r\n  if(depends) {\r\n    return depends\r\n  } else if(optional === 'optional') {\r\n    return null\r\n  } else {\r\n    throw new Error(`未找到${name}的依赖值，请在上层servcieComponent中提供对应的service hook`)\r\n  }\r\n}","import { useCallback, useRef } from \"react\";\r\n\r\n/**\r\n * @description 防抖函数\r\n * @param callback 初始回调函数\r\n * @param deps 依赖值\r\n * @param debounceTime 防抖时间\r\n * @returns debouncer \r\n */\r\nexport function useDebounceCallback<T extends []>(callback: (...params: T) => void, deps: unknown[], debounceTime: number) {\r\n\r\n  const timeRef = useRef<NodeJS.Timeout>(null);\r\n  const runner  = useCallback(callback, deps);\r\n\r\n  const debouncer = (...params:T) => {\r\n    clearTimeout(timeRef.current);\r\n    const runTimeout = () => {\r\n      return setTimeout(() => { runner(...params) }, debounceTime)\r\n    }\r\n    timeRef.current = runTimeout();\r\n  }\r\n\r\n  return debouncer;\r\n}","import { useRef } from \"react\";\r\n\r\n/**\r\n * @description 将最近两次变化的值并返回(只有输入值变化时，返回值才会相应地更新)\r\n * @param state 状态变量（建议为useState函数返回的变量）\r\n * @returns 上一个值\r\n */\r\nexport function usePrevious<T>(state: T) {\r\n  const prevRef = useRef<T>();\r\n  const curRef = useRef<T>();\r\n\r\n  if(curRef.current !== state) {\r\n    prevRef.current = curRef.current;\r\n    curRef.current = state;\r\n  }  \r\n\r\n  return prevRef.current;\r\n}","import { useState } from \"react\";\r\n\r\n/**\r\n * @description 使用引用类型的状态变量，并返回状态值和状态变更函数\r\n * @param refState \r\n * @returns \r\n */\r\nexport function useRefState<T extends object>(refState: T): [T, (v: Partial<T>) => void] {\r\n  const [state, setState] = useState(refState);\r\n\r\n  const setRefState = (newV: Partial<T>) => {\r\n    setState(oldV => ({ ...oldV, ...newV }));\r\n  }\r\n\r\n  return [state, setRefState]\r\n}","import { useEffect, useState } from \"react\";\r\n\r\n/**\r\n * @description 保存状态的历史变化记录\r\n * @param state 状态变量\r\n * @returns state历史值，最新值在末尾\r\n */\r\nexport function useHistoryState<T>(state: T) {\r\n  const [logs, setLogs] = useState<T[]>([]);\r\n\r\n  useEffect(() => {\r\n    setLogs(logs => logs.concat([state]))\r\n  }, [state])\r\n\r\n  return logs\r\n}","import { useEffect, useRef } from \"react\";\r\nimport { usePrevious } from \"./usePrevious\";\r\n\r\n/**\r\n * @description 依赖值更新时执行副作用函数（忽略组件第一次渲染后的副作用），并将每个依赖上一次变更的值传给副作用函数\r\n * @param callback 要执行的回调函数\r\n * @param deps 状态依赖\r\n */\r\nexport function useUpdateEffect(callback: ((changes?: unknown[]) => () => void) | ((changes?: unknown[]) => void), deps: unknown[]) {\r\n  const counter = useRef(0);\r\n  const changesRef = useRef([]) ;\r\n  \r\n  deps.forEach((dep, index) => {\r\n    changesRef.current[index] = usePrevious(dep)\r\n  })\r\n\r\n  useEffect(() => {\r\n    counter.current ++;\r\n    if(counter.current == 1) return;\r\n    return callback(changesRef.current);\r\n  }, deps)\r\n}","import { useEffect, useRef } from \"react\";\r\n\r\n/**\r\n * @description 依赖值更新时执行的副作用函数，并将函数上一次调用时的所有依赖值传给当前调用(注意与useUpdateEffect的区别)\r\n * @param callback 要执行的回调函数\r\n * @param deps 状态依赖\r\n */\r\nexport function useWatchEffect(callback: ((changes?: unknown[]) => () => void) | ((changes?: unknown[]) => void), deps: unknown[]) {\r\n  const runCount = useRef(0);\r\n  const caches = useRef([]);\r\n\r\n  useEffect(() => {\r\n    caches.current.push(deps);    \r\n    runCount.current ++;\r\n    if(runCount.current  === 1) return;\r\n    return callback(caches.current.shift());    \r\n  }, deps)\r\n}","import { useState } from \"react\";\r\nimport { usePrevious } from \"./usePrevious\";\r\nimport { useUpdateEffect } from \"./useUpdateEffect\";\r\n\r\n/**\r\n * @description 记录状态的变化次数(第一次初始化时记为第0次)\r\n * @param state 状态变量\r\n * @param options\r\n * deep: 是否为深度比较，state为对象时，会遍历其属性进行比较,全部相等时不会记为一次变化\r\n * @returns \r\n */\r\nexport function useUpdateCount<T>(state: T, options?: {deep: boolean}) {\r\n  const[count, setCount] = useState(0);\r\n  const before = usePrevious(state);\r\n\r\n  useUpdateEffect(() => {\r\n    if(options?.deep) {\r\n      let changed: boolean;\r\n      for(let key in state) {\r\n        if(state[key] !== before[key]) {\r\n          changed = true;\r\n          break;\r\n        }\r\n      }\r\n      changed && setCount(v => v + 1)\r\n    } else {\r\n      state !== before && setCount(v => v + 1)\r\n    }\r\n  }, [state, before])\r\n\r\n  return count\r\n}","\r\n/** http拦截器函数 */\r\nexport interface HttpIntercept {\r\n  /** http请求拦截器 */\r\n  requestIntercept?: (request: RequestOptions) => Promise<RequestOptions>;\r\n  /** http响应拦截器 */\r\n  responseIntercept?: (res: any) => Promise<any>;\r\n}\r\n\r\n/** 自定义http请求函数 */\r\nexport interface RequesterFunc {\r\n  (input: string, opt?: RequestOptions): Promise<Record<string, any>>;\r\n}\r\n\r\n/** 请求配置项 */\r\nexport interface RequestOptions {\r\n  url: string;\r\n  reqData: any;\r\n  auto: boolean;\r\n  method: 'GET' | 'POST' | 'PUT' | 'HEAD' | 'DELETE';\r\n  headers: any;\r\n  [prop: string]: any;\r\n}\r\n\r\n/** http请求状态 */\r\nexport type HttpState = 'ready' | 'pending' | 'refreshing' | 'success' | 'failed';\r\n\r\n/** HTTP拦截器token */\r\nexport const HTTP_INTERCEPT = Symbol('供useHttp使用的请求拦截器');\r\n\r\n/** 自定义HTTP函数token */\r\nexport const CUSTOME_REQUEST = Symbol('自定义请求函数，以覆盖默认的fetch函数');\r\n\r\n/** Paging分页请求配置 */\r\nexport interface PagingSetting<T = any> {\r\n  start: 0 | 1;\r\n  size: number;\r\n  sizeKey: string;\r\n  indexKey: string;\r\n  method: 'GET' | 'POST';\r\n  scrollLoading: boolean;\r\n  dataPlucker: (res: any) => T[];\r\n  totalPlucker: (res: any) => number;\r\n}\r\n\r\n/** 分页请求状态） */\r\nexport type PagingState = 'empty' | 'unfulled' | 'fulled' | 'refreshing' | 'loading';\r\n\r\n/** Paging分页请求token */\r\nexport const PAGING_SETTING = Symbol('提供全局分页配置');","import { useEffect, useState } from \"react\";\r\nimport { CUSTOME_REQUEST, HttpIntercept, HttpState, HTTP_INTERCEPT, RequesterFunc, RequestOptions } from \"../../domain/http\";\r\nimport { useServiceHook } from \"../di/useServiceHook\";\r\n\r\nconst DEFAULT_HTTP_OPTIONS: Partial<RequestOptions> = {\r\n  auto: true,\r\n  method: 'GET',\r\n  reqData: {}\r\n}\r\n\r\n/**\r\n * @description ajax请求，默认通过fetch发送请求，可通过di依赖注入提供自定义请求方法覆盖\r\n * @param url \r\n * @param options \r\n * @returns \r\n */\r\nexport function useHttp<T>(\r\n  url: string, options: Partial<RequestOptions> = {}\r\n): [T, (query?: any) => Promise<void | T>, HttpState, any] {\r\n\r\n  /** 设置请求配置以及上层组件注入进来的依赖项 */\r\n  const localOption   = Object.assign(Object.create(DEFAULT_HTTP_OPTIONS), options, { url });\r\n  const intercept     = useServiceHook<HttpIntercept>(HTTP_INTERCEPT, 'optional');\r\n  const customeReq    = useServiceHook<RequesterFunc>(CUSTOME_REQUEST, 'optional');\r\n\r\n  /** 定义http请求的相关状态变量 */\r\n  const [res, setRes]        = useState<T>();\r\n  const [err, setErr]        = useState<any>();\r\n  const [state, setState]    = useState<HttpState>('ready');  \r\n\r\n  const request = (query: any = {}) => {\r\n    setState('pending');\r\n    return new Promise<RequestOptions>(resolve => {\r\n      if(intercept?.requestIntercept) {\r\n        intercept.requestIntercept(localOption).then(final => resolve(final))\r\n      } else resolve(localOption)\r\n    })\r\n    .then(options => {\r\n      let reqData = {...options.reqData, ...query};\r\n      if(customeReq) {\r\n        return customeReq(options.url, {...options, reqData})\r\n      } else {\r\n        if(['GET', 'HEAD'].includes(options.method)) {\r\n          const searchKeys = `?${objectToUrlSearch(reqData)}`;\r\n          options.url += searchKeys;  \r\n        } else {\r\n          options.body = JSON.stringify(reqData);\r\n          delete options.reqData;\r\n        }\r\n        return fetch(options.url, options)\r\n      }\r\n    })\r\n    .then(response => {\r\n      const res = response;\r\n      const resIntercept = intercept?.responseIntercept\r\n      if(customeReq) {\r\n        return resIntercept ? resIntercept(res) : res;\r\n      } else {\r\n        return res.json().then((re: any) => resIntercept ? resIntercept(re) : re)\r\n      }\r\n    })\r\n    .then(res => {\r\n      setRes(res);\r\n      setState('success');\r\n      return res as T;\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n      setState('failed');\r\n      setErr(err);\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(options.auto) request()\r\n  }, [])\r\n\r\n  return [res, request, state, err]\r\n} \r\n\r\nfunction objectToUrlSearch(obj: object) {\r\n  console.log(obj)\r\n  if(!obj) return '';\r\n  let str = '';\r\n  for(let key in obj) {\r\n    str += `${key}=${obj[key]}&`\r\n  }\r\n  return str\r\n}","import { useEffect, useLayoutEffect, useMemo, useRef } from \"react\";\r\nimport { HttpState, PagingSetting, PagingState, PAGING_SETTING, RequestOptions } from \"../../domain/http\";\r\nimport { useServiceHook } from \"../di/useServiceHook\";\r\nimport { useHttp } from \"./useHttp\";\r\nimport { useUpdateEffect } from '../common/useUpdateEffect'\r\n\r\ninterface PagingAction {\r\n  /** 刷新请求(分页重置，保留每次请求的查询参数querys) */\r\n  refresh: (querys: object) => void;\r\n  /** 重置请求(分页重置，清除历史查询参数querys，但保留初次调用时的querys) */\r\n  reset: () => void;\r\n  /** 请求下一页数据 */\r\n  nextPage: () => void;\r\n}\r\n\r\ninterface Page {\r\n  target: number;\r\n  __index: number;\r\n  __size: number;\r\n  total: number;\r\n  [prop: string]: number;\r\n}\r\n\r\nconst LocalPagingSetting: Partial<PagingSetting> = {\r\n  method: 'POST',\r\n  sizeKey: 'pageSize',\r\n  indexKey: 'pageNo',\r\n  size: 10,\r\n  start: 1,\r\n  scrollLoading: true,\r\n  dataPlucker: res => res.data,\r\n  totalPlucker: res => res?.total || 0\r\n}\r\n\r\nexport function usePaging<T>(\r\n  url: string,\r\n  querys: object = {},\r\n  localSetting: Partial<PagingSetting & RequestOptions>  = {}\r\n): [T[], PagingAction, {pagingState: PagingState, httpState: HttpState}] {\r\n\r\n  /** 初始化分页请求配置 */\r\n  const globalSetting = useServiceHook<PagingSetting>(PAGING_SETTING, 'optional');\r\n  const setting = {...LocalPagingSetting, ...(globalSetting || {}), ...localSetting};  \r\n\r\n  /** 初始化条件查询对象 */\r\n  const querysRef = useRef(querys);\r\n\r\n  /** 初始化分页信息 */\r\n  const pageRef = useRef<Partial<Page>>({});\r\n\r\n  useLayoutEffect(() => {\r\n    pageRef.current.target                 = setting.start;\r\n    pageRef.current[setting['indexKey']]   = setting.start;\r\n    pageRef.current[setting['sizeKey']]    = setting.size;\r\n\r\n    !pageRef.current.hasOwnProperty('__index') && \r\n    Object.defineProperty(pageRef.current, '__index', {\r\n      get: () => pageRef.current[setting['indexKey']],\r\n      set: (num: number) => { pageRef.current[setting['indexKey']] = num }\r\n    });\r\n    !pageRef.current.hasOwnProperty('__size') && \r\n    Object.defineProperty(pageRef.current, '__size', {\r\n      get: () => pageRef.current[setting['sizeKey']]\r\n    });\r\n  }, [])\r\n\r\n  /** 定义分页请求逻辑 */\r\n  const [res, request, httpState ] = useHttp<T>(url, {...setting, auto: false});\r\n\r\n  const loadData = () => {\r\n    if (httpState === 'pending') return;    \r\n    return request({ ...querysRef.current, [setting['indexKey']]: pageRef.current.target, [setting['sizeKey']]: pageRef.current.__size })\r\n  }\r\n\r\n  const refresh = (param = {}) => {\r\n    querysRef.current = { ...querys, ...querysRef.current, ...param };\r\n    pageRef.current.target = setting.start;\r\n    loadData();\r\n  }\r\n\r\n  const reset = () => {\r\n    querysRef.current = querys;\r\n    pageRef.current.target = setting.start;\r\n    loadData()\r\n  }\r\n\r\n  const nextPage = () => {    \r\n    if (pagingState === 'fulled') return;\r\n    pageRef.current.target = pageRef.current.__index + 1;\r\n    loadData();\r\n  }    \r\n\r\n  useEffect(() => {\r\n    if(setting.auto) loadData();\r\n  }, [])\r\n\r\n  /** 根据请求结果设置分页数据 */\r\n  const currentPagingData = useMemo<T[]>(() => res ? setting.dataPlucker(res) : [], [res]);\r\n  const concatedRef       = useRef<T[]>([]);\r\n\r\n  useUpdateEffect(() => {    \r\n    httpState === 'success' && (pageRef.current.__index = pageRef.current.target) // 只有在请求成功时才能将当前页index值更新为目标页target \r\n  }, [httpState])\r\n\r\n  useUpdateEffect(() => {\r\n    if(pageRef.current.target === setting.start) {\r\n      concatedRef.current = currentPagingData;\r\n    } else {\r\n      if(setting.scrollLoading) concatedRef.current = concatedRef.current.concat(currentPagingData);\r\n    }\r\n  }, [currentPagingData])    \r\n\r\n  useUpdateEffect(() => {\r\n    pageRef.current.total = setting.totalPlucker(res);\r\n  }, [res])   \r\n  \r\n  /** 根据请求结果设置分页请求状态 */\r\n  const pagingState: PagingState = useMemo(() => {\r\n    switch(httpState) {\r\n      default:\r\n        return 'refreshing';\r\n      case 'pending':\r\n        if(pageRef.current.target === setting.start) {\r\n          return 'refreshing';\r\n        } else {\r\n          return 'loading'\r\n        }\r\n      case 'success':\r\n        if(pageRef.current.target === setting.start && !currentPagingData?.length) return 'empty';\r\n        if(currentPagingData.length < pageRef.current.__size) return 'fulled';\r\n        if(concatedRef.current.length >= pageRef.current.total) return 'fulled';\r\n        return 'unfulled';\r\n    }\r\n  }, [httpState])\r\n  \r\n\r\n  return [    \r\n    setting.scrollLoading ? concatedRef.current : currentPagingData,\r\n    { refresh, reset, nextPage },    \r\n    {pagingState, httpState}\r\n  ]\r\n}\r\n"],"names":["createContext","React","useContext","useRef","useCallback","useState","useEffect","useLayoutEffect","useMemo"],"mappings":"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"}